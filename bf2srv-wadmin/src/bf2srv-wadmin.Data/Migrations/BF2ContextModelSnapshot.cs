// <auto-generated />
using System;
using bf2srv-wadmin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace bf2srv-wadmin.Data.Migrations
{
    [DbContext(typeof(BF2Context))]
    partial class BF2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MapMod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MapMods");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MapModObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MapModId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rotation")
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MapModId");

                    b.ToTable("MapModObjects");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Map")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MatchEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MatchStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamAHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamAName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamAScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamBHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamBName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamBScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MatchRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<double>("PositionTrackerInterval")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("RoundEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RoundStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("WinningTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchRounds");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MatchRoundPlayer", b =>
                {
                    b.Property<Guid>("RoundId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeathPosition")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeathTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("KillerHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("KillerPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("KillerWeapon")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovementPathJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectilePathsJson")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SaidGo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubVehicle")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoundId", "PlayerHash");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchRoundPlayers");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.Server", b =>
                {
                    b.Property<string>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordAdminChannel")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordBotToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordMatchResultChannel")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordNotificationChannel")
                        .HasColumnType("TEXT");

                    b.Property<int>("GamePort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("QueryPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RconPassword")
                        .HasColumnType("TEXT");

                    b.Property<int>("RconPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerGroup")
                        .HasColumnType("TEXT");

                    b.HasKey("ServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.ServerModule", b =>
                {
                    b.Property<string>("ServerGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Module")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerGroup", "Module");

                    b.ToTable("ServerModules");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.ServerPlayerAuth", b =>
                {
                    b.Property<string>("ServerGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("AuthLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerGroup", "PlayerHash");

                    b.ToTable("ServerPlayerAuths");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MapModObject", b =>
                {
                    b.HasOne("bf2srv-wadmin.Data.Entities.MapMod", "MapMod")
                        .WithMany("MapModObjects")
                        .HasForeignKey("MapModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapMod");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MatchRound", b =>
                {
                    b.HasOne("bf2srv-wadmin.Data.Entities.Match", "Match")
                        .WithMany("MatchRounds")
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MatchRoundPlayer", b =>
                {
                    b.HasOne("bf2srv-wadmin.Data.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bf2srv-wadmin.Data.Entities.MatchRound", "Round")
                        .WithMany("MatchRoundPlayers")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MapMod", b =>
                {
                    b.Navigation("MapModObjects");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.Match", b =>
                {
                    b.Navigation("MatchRounds");
                });

            modelBuilder.Entity("bf2srv-wadmin.Data.Entities.MatchRound", b =>
                {
                    b.Navigation("MatchRoundPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
